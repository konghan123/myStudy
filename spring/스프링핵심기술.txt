1. 웹
* 웹서버
- 정적인 파일을 서빙
* 웹애플리케이션서버
- 사용자에 따라서 다른 화면을 보여줄 수 있음(동적)
- 프로그램 코드를 실행하여 애플리케이션 로직 수행

* 웹서버, 웹애플리케이션 서버 의 차이
- 웹서버는 정적파일, was는 애플리케이션 로직을 실행

* 웹 시스템 구성
- was, DB만으로 구성 가능
-- 이렇게 해버리면 was가 애플리케이션 로직, 정적파일 다 담당해서 과부화
-- was는 잘죽어서 오류화면을 제공하지 못함
- 웹서버, was DB
-- 웹서버는 정적파일을 송출
-- 동적인 처리가 필요하면 was에 위임하는 형태(업무분담)
-- 정적 리소스가 많이 필요되면 웹서버 증설, 애플리케이션 로직이 많이 사용되면 was 증설
-- web서버는 잘 죽지 않기에 오류화면을 제공 가능해짐
-- 해당 구성을 기반으로 만들어짐!!

*서블릿
- TCP/IP연결, http요청메세지 파싱, 응답 메시지생성
  을 도와줌 (비즈니스 로직을 제외한 모든 작업을 자동화해줌)
- http 요청시 reqeust, response객체를 생성하여 서플릿 객체에 호출
  그리고 request객체에서 요청정보를 꺼내서 사용 후 response객체로 
  필요한 데이터를 담아서 클라이언트에게 넘김

*서블릿 컨테이너
- 서블릿을 지원하는 was를 서블릿 컨테이너라고함
- 서블릿 객체의 생성, 초기화,호출,종료 등 생명주기 관리
- 서블릿 객체는 싱글톤으로 관리
-- 요청마다 생성하는 것은 비효율
-- 미리 만들어두고 재활용
-- 멀티스레드 처리 지원(중요!)

*멀티 스레드
- 스레드
-- 애플리케이션 코드를 하나하나 순차적으로 실행하는것
-- 스레드가 없으면 애플리케이션 실행 불가능
-- 쓰레드는 하난의 코드라인만 실행
-- 동시처리가 필요하면 여러 쓰레드가 필요

- 요청할 때마다 쓰레드 생성
-- 동시 요청 처리가능
-- 쓰레드 생성 비용이 비쌈 (서버 부하)
-- 컨텍스트 스위칭 비용 발생 ( 쓰레드에서 다른 쓰레드로 작업을 이동할때의 비용)
-- 쓰레드 생성은 제한이 없기에 메모리 임계점을 넘어 서버가 죽을 수 있다 

- was에서 쓰레드
-- 쓰레드 풀이 존재( 미리 쓰레드를 어느정도 생성해둠)
-- 작업이 완료된 쓰레드는 쓰레드 풀로 돌아감
-- 생성된 쓰레드 이상의 작업 요청이 들어오면 대기시킴
-- 쓰레드 풀 실무 팁
--- 튜닝 포인트는 최대 쓰레드 수
    (너무 낮게 너무 높게 설정하면 안됨)

* 백엔드 용어
- 정적 리소스
- 동적 HTML 페이지
- HTTP API [참고47페이지]
-- 주로 JSON형태로 데이터 통신
-- 클라이언트, 서버 등 다양하게 시스템 연동
(이 세개를 어떻게 만들지 고민하는게 백엔드)

- 서버사이드 렌더링 (SSR) [참고51페이지]
--서버에서 최종 HTML을 생성하여 클라이언트에 전달
-- 주로 정적인 화면 사용
- 클라이언트사이드 렌더링 (CSR)
-- HTML결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성
-- 주로 동적인 화면 사용
-- react, vue

2. 서블릿
* httpServletRequest
- 서블릿은 개발자를 대신하여 http요청 메세지를 파싱하는데 
  그 결과를 httpServletRequest 객체에 담아서 제공
 
  









