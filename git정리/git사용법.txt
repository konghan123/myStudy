타임캡슐을 담고(add)나서 묻는다(commit)!!
처음 시작할 때 git config --global user.name "유저이름" 과  "" user.email "이메일" 을 설정해준다
설정된 것을 확인하는 방법은 뒤에 " "의 내용을 빼고 명령어 실행
vscode 안에서 폴더와 터미널을 넣어서 사용 가능
git init > 해당 폴더에서 git을 관리하는 파일을 생성! (해당 파일을 지우면 git으로 관리했던 내용들이 다 날아감)
git status > 현재 섹션에서 자료들이 어떠한 상태인지(자료들의 커밋상태를 알려줌)
(언트랙 >> git의 관리에 들어간 적 없는 파일)
git에 포함하지 않을 파일들을 지정하는 방법
 >> .gitignore이라는 파일을 만들어서 그 파일안에 포함하지 않을 파일명을 적음

git log > 해당 프로젝트에서 커밋을 했던 기록들을 보여준다.
git add "해당파일" > 현재 섹션에서 해당파일의 자료 정보를 add한다.
git add . > 현재 섹션에서 모든 파일들의 자료 정보를 add한다.
git commit > 커밋을 할 창으로 들어간다.
git commit -m "이름" > 이름으로 커밋을 한다 
git commit -am "이름" > 이름으로 add하고나서 커밋한다 (단, 새로만든 파일이 없을 경우에만 가능)

reset > 원하는 시점으로 돌아간 뒤 이후 내역들을 지움
revert > 되돌리기 원하는 시점의 커밋을 거꾸로 실행(현업에서는 리벌트만 사용)
git reset --hard "돌아갈 커밋이름" >돌아갈 커밋으로 리셋  
git reset --hard > 이전 커밋으로 돌아감
git revert "돌아갈 커밋이름" > 돌아갈 커밋으로 리벌트 (충돌이 일어나면 해당 문제 파일을 삭제하고 git revert --continue로 마무리한다음 :wq로 저장)
git revert --no-commit "되돌릴 커밋이름" > 커밋하지 않고 리벌트

git branch (브랜치 이름) > 새로운 브랜치 생성
git branch > 브랜치 목록 확인
git branch -a > 원격 포함 모든 브랜치 확인
git switch (브랜치 이름) > 해당 이름 브랜치로 이동
git switch -c (브랜치 이름) > 브랜치를 생성하고 동시에 그 브랜치로 이동
git branch -d (브랜치 이름) > 해당 브랜치를 삭제
git branch -m (기존 브랜치 이름) (새로운 브랜치 이름) > 브랜치 이름 변경
merge > 두 브랜치를 한 커밋에 이어붙이며 브랜치 사용 내역을 남길 필요가 있을 때 적합한 방식
rebase > 브랜치를 다른 브랜치로 이어붙이며 한 줄로 깔끔히 정리된 내역을 유지할때 사용
git merge (브랜치 이름) [합친결과가 나올 브랜치에서]> 멀즈로 브랜치를 합침
*** 멀지 충돌이 일어날 경우 합쳐질 브랜치와 합칠 브랜치의 충돌중 어떤 것을 고를 지 선택지가 나옴  >> 고르고 난후 add와 커밋을 한다! 
(커밋할땐 git commit만 치면 알아서 내용이 뜨면서 :wq해준다) 
git merge --abort > 충돌이 발생했을 때 멀지를 종료
git rebase (브랜치 이름) [합쳐질 브랜치에서] > 리베이스로 브랜치 합침  >>>>>> 그 후에 합친결과가 나올 브랜치로 돌아와서 git merge (합쳐질 브랜치)
*** 리베이스 충돌이 일어날 경우 합쳐질 브랜치와 합칠 브랜치의 충돌중 어떤 것을 고를 지 선택지가 나옴  >> 고르고 난후 add 한다음에 git rebase --continue를 써준다
(리베이스의 경우 충돌하나하나마다 해줘야함)
git rebase --abort > 충돌이 발생했을 때 리베이스를 종료

github 토큰 비번 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

git remote add origin (원격 저장소 주소) > 깃 저장소에 원격 저장소로의 연결 추가 ***origin은 원격저장소 이름으로 아무거나 가능한데 흔히 origin이라 쓰임
git push -u origin[원격저장소이름] (브랜치 이름) > 해당 브랜치를 해당 원격저장소에 업로드
git remote remove (원격 저장소 이름) > 원격 지우기
git remote > 원격 목록보기
업로드 내용을 다운 받는 방법 > 1. 다운로드 zip > git파일은 없기 때문에 협업할땐 추천 x
                                            2. 다운 받을 파일에서 > git bash here클릭 >깃허브 페이지의 코드에 들어가서 clone의 주소 복사 > git bash에 git clone (복사한것) 침
git push > 업데이트된 자료를 내 컴퓨터에서 깃허브로 또는 깃 원격 저장소로 올림!
git pull > 업데이트된 내용을 당겨오기
내가 푸쉬를 하려고하지만 원격저장소가 업데이트가 되어서 푸쉬가 안될 경우! > 1. git pull --no-rebase >(멀지) 로컬과 원격의 어긋난 시간선을 한군데로 모아줌 >> git push
                                                                                                             2. git pull --rebase > (리베이스)원격 것을 붙이고 그 다음에 내가 한것을 짤라서 붙임 >> git push   (pull에서 리베이스는 협업상 좋음)
충돌이 일어날 경우 위 처럼 처리하대 git pull --rebase의 경우 충돌 중 어느것을 선택하냐에 따라 커밋이 하나 또는 둘이 생길 수 있다. 

git push -u (원격저장소이름) (브랜치 이름) > 로컬에 있는 브랜치를 원격 저장소에 등록
git fetch > 원격 변경사항 확인
git switch -t (원격저장소이름)/(브랜치 이름) > 원격에 있는 브랜치를 로컬에도 등록                                                                                         
git push (원격저장소 이름) --delete (원격의 브랜치명) > 원격 브랜치 삭제
