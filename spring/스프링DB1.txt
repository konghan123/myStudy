1. JDBC
- 과거에 DB마다 연결하는 방법이 달랐고
  포맷이 달랐다. 그래서 DB마다 연결, Sql전달, 결과 받는 방법을 각각 배워야했다.
  그래서 자바에서는 모든 데이터 베이스에 접속할 수 있게
  표준 인터페이스를 만들게 되는데 그것이 JDBC이다.   
  그래서 각각 DB들은 JDBC인터페이스에 맞게 구현해서 라이브러리로
  제공하는 것이 JDBC드라이버라고 한다
- 연결(connection), sql전달(statement), 결과 응답값(ResultSet)

- 하지만 sql의 경우 각각의 데이터베이스에 맞는 쿼리를 적용해야한다는
   한계점이 존재

** 데이터베이스 커넥션 연결은 주로 TCP/IP로 연결

- JDBC를 직접 사용해도 되지만 사용방법이 복잡하다
  그래서 JDBC를 편리하게 사용하기 위해 sqlMapper와 ORM기술이 등장

- sqlMapper
-- 장점
--- JDBC를 편리하게 사용하도록 도와줌
--- 응답결과를 객체로 편리하게 변환
--- sql만 알면 금방 배워서 사용가능
-- 단점
--- sql을 직접 작성

- ORM
-- 객체를 관계형 데이터베이스테이블과 매핑해주는 기술

-- 개발자 대신 sql을 동적으로 만들어 실행해줌

--장점
--- sql을 작성하지 않아도됨
--- 데이터베이스마다 다른 sql을 사용하는 문제를 해결
-- 단점
--- 깊이있는 학습이 필요

- JDBC 사용하기

-- DB연결하기

-- DriverManager.getConnection(URL, USERNAME, PASSWORD)
    해당 구문으로 드라이버연결하여 DB연결

-- 받은 DB드라이버 라이브러리에 따라 해당 드라이버의 
    Connection 인터페이스 구현체를 제공하여 연결시킴  

-- 만약 드라이버가 여러개의 경우
    URL정보에서 "jdbc:데이터베이스" 를 통해 해당 DB드라이버에 
    연결하여 커넥션을 반환함
    처리할 수 없으면 다음 드라이버 순서를 넘김

-- DB에 INSERT하기
--- String으로 sql문 짜고 Connection객체를 들고와서
    그 객체로 prepareStatement() 객체를 들고옴
    그리고 sql문의 ? 부분에  prepareStatement객체.set타입(?순서, 값)
    을 통해 sql값 세팅 그 후 executeUpdate()로 DB에 sql을 넘겨서 값을 받음

--- 이후 prepareStatement, Connection순으로 객체를 닫아줘야함!
    (반드시 finally에서 호출)

-- DB에서 SELECT하기

--- String으로 sql문 짜고 Connection객체를 들고와서
    그 객체로 prepareStatement() 객체를 들고옴
    그리고 sql문의 ? 부분에  prepareStatement객체.set타입(?순서, 값)
    을 통해 sql값 세팅 그 후 ResultSet을  prepareStatement를 통해 불러와서
    rs.next()로 한번 넘어가 쿼리에 대한 값을 불러오고
    그 값들을 DTO에 담는다!

--- ResultSet
---- select 쿼리 결과가 들어가 있음
---- ResultSet 안에는 커서가 존재하여 rs.next()하면
      커서가 다음으로 이동한다
      (최초의 커서는 데이터를 가르키지 않기에 rs.next()를 한번 해줌)





















