1. 웹
* 웹서버
- 정적인 파일을 서빙
* 웹애플리케이션서버
- 사용자에 따라서 다른 화면을 보여줄 수 있음(동적)
- 프로그램 코드를 실행하여 애플리케이션 로직 수행

* 웹서버, 웹애플리케이션 서버 의 차이
- 웹서버는 정적파일, was는 애플리케이션 로직을 실행

* 웹 시스템 구성
- was, DB만으로 구성 가능
-- 이렇게 해버리면 was가 애플리케이션 로직, 정적파일 다 담당해서 과부화
-- was는 잘죽어서 오류화면을 제공하지 못함
- 웹서버, was DB
-- 웹서버는 정적파일을 송출
-- 동적인 처리가 필요하면 was에 위임하는 형태(업무분담)
-- 정적 리소스가 많이 필요되면 웹서버 증설, 애플리케이션 로직이 많이 사용되면 was 증설
-- web서버는 잘 죽지 않기에 오류화면을 제공 가능해짐
-- 해당 구성을 기반으로 만들어짐!!

*서블릿
- TCP/IP연결, http요청메세지 파싱, 응답 메시지생성
  을 도와줌 (비즈니스 로직을 제외한 모든 작업을 자동화해줌)
- http 요청시 reqeust, response객체를 생성하여 서플릿 객체에 호출
  그리고 request객체에서 요청정보를 꺼내서 사용 후 response객체로 
  필요한 데이터를 담아서 클라이언트에게 넘김

*서블릿 컨테이너
- 서블릿을 지원하는 was를 서블릿 컨테이너라고함
- 서블릿 객체의 생성, 초기화,호출,종료 등 생명주기 관리
- 서블릿 객체는 싱글톤으로 관리
-- 요청마다 생성하는 것은 비효율
-- 미리 만들어두고 재활용
-- 멀티스레드 처리 지원(중요!)

*멀티 스레드
- 스레드
-- 애플리케이션 코드를 하나하나 순차적으로 실행하는것
-- 스레드가 없으면 애플리케이션 실행 불가능
-- 쓰레드는 하난의 코드라인만 실행
-- 동시처리가 필요하면 여러 쓰레드가 필요

- 요청할 때마다 쓰레드 생성
-- 동시 요청 처리가능
-- 쓰레드 생성 비용이 비쌈 (서버 부하)
-- 컨텍스트 스위칭 비용 발생 ( 쓰레드에서 다른 쓰레드로 작업을 이동할때의 비용)
-- 쓰레드 생성은 제한이 없기에 메모리 임계점을 넘어 서버가 죽을 수 있다 

- was에서 쓰레드
-- 쓰레드 풀이 존재( 미리 쓰레드를 어느정도 생성해둠)
-- 작업이 완료된 쓰레드는 쓰레드 풀로 돌아감
-- 생성된 쓰레드 이상의 작업 요청이 들어오면 대기시킴
-- 쓰레드 풀 실무 팁
--- 튜닝 포인트는 최대 쓰레드 수
    (너무 낮게 너무 높게 설정하면 안됨)

* 백엔드 용어
- 정적 리소스
- 동적 HTML 페이지
- HTTP API [참고47페이지]
-- 주로 JSON형태로 데이터 통신
-- 클라이언트, 서버 등 다양하게 시스템 연동
(이 세개를 어떻게 만들지 고민하는게 백엔드)

- 서버사이드 렌더링 (SSR) [참고51페이지]
--서버에서 최종 HTML을 생성하여 클라이언트에 전달
-- 주로 정적인 화면 사용
- 클라이언트사이드 렌더링 (CSR)
-- HTML결과를 자바스크립트를 사용해 웹 브라우저에서 동적으로 생성
-- 주로 동적인 화면 사용
-- react, vue

2. 서블릿
* httpServletRequest
- 서블릿은 개발자를 대신하여 http요청 메세지를 파싱하는데 
  그 결과를 httpServletRequest 객체에 담아서 제공
 
* http요청 데이터
- 서버로 데이터를 넘기는 방식
--GET 쿼리파라미터
--- ex. /url?username=hello&age=20
--- 메세지 바디없이 URL의 퀴리 파라미터에 데이터를 포함
--POST HTML FORM
--- 메시지 바디에 쿼리 파리미터 형식으로 전달 username=hello&age=20 
--- content-type(메시지 바디에 대한 정보를 설명)
--HTTP message body에 데이터를 직접 담음
--- HTTP API에서 주로 사용 
--- 데이터 형식은 주로 JSON
--- 단순 텍스트의 경우(content-type은 text)
---- request객체에서 getInputStream()을 통해 서블릿스트림 객체 호출
     이후 해당 객체에 담긴 메세지바디의 데이터를 String타입으로 변경
      (StreamUtils.copyToString(스트림객체, 캐릭터셋)
--- JSON의 경우(content-type은 json)(라이브러리필요)
---- JSON 데이터를 파싱할 수 있는 객체가 필요!!( 직접 만들어줌)
---- request객체에서 getInputStream()을 통해 서블릿스트림 객체 호출
     이후 해당 객체에 담긴 메세지바디의 데이터를 String타입으로 변경
---- ObjectMapper 객체를 생성하여 readValue(메세지바디, 파싱클래스)
      를 통해 해당 값을 담은 파싱객체 생성

* httpServletReponse
- 해당 객체를 통해 다양한 세팅을 제공함
  (HTTP응답 코드 지정, 헤더 생성 ,바디 생성, 쿠키, Redirect, content-type)
- setStatus(응답코드) 메서드를 통해 응답코드 세팅가능
- setHeader(name[헤더이름], value)
  (내가 만든 헤더도 세팅 가능)
  (헤더에 관한 편의 메서드도 존재함)
- 쿠키 세팅
-- 쿠키 객체를 만들어서 response의 addCookie(쿠키)를 통해 쿠키를 세팅 가능
   (쿠키 객체는 setMaxAge(초)를 통해 유지 시간 세팅 가능)
- sendRedirect(URL)을 통해 해당 URL로 리타이렉트
- 메시지 바디 세팅
-- getWriter()메서드를 통해 PrintWriter객체를 호출
   이후 해당 PrintWriter의 println(메시지)를 통해 응답 메시지바디 세팅

* http응답 데이터
- 클라이언트로 데이터를 넘기는 방식
-- 단순텍스트
-- HTTP API (JSON) (라이브러리 필요)
--- ObjectMapper의 writeValueAsString(객체) 를 통해
     해당 데이터를 JSON으로 변경

3. MVC 패턴 (서블릿 <-> JSP)
- 쓰게 된 이유
-- 하나의 서블릿이나 JSP가 로직과 렌더링을 둘다 담당하게되면
  유지보수가 어려워짐 
  (즉, 코드 파악하기도 힘들고 유지보수 중 코드를 잘못 건들 수 있음)
-- 로직과 렌더링을 수정하는 경우 하나의 코드로 관리하는 것은
  유지보수가 힘듬
-- JSP는 화면을 렌더링하는 것이 최적화 되어있기에
  로직은 따로 분할한느 것이 좋다
-- 그래서 MVC패턴을 사용
--- Controller에서 비즈니스로직을 실행하여 Model에 데이터를 담고
     View에서 Model의 데이터를 참고하여 화면을 렌더링
     (컨트롤러에 비즈니스로직을 두는 것은 너무 투머치함,
     일반적으로는 서비스계층을 두어 별도로 처리함으로써 
     컨트롤러는 비즈니스 로직을 호출하는 역할을 맡는다)
-한계
-- 매번 forward 메서드를 호출해야함
-- 사용안되는 매개변수가 생김 (response의 경우 사용안됨)
-- 공통처리가 힘듬
    (기능이 복잡해질수록 공통처리 부분이 늘어나는데
     중간에 묶어서 처리해줄 수문장이 없음)
    (프론트 컨트롤러패턴을 도입하면 해결가능)                  

4. MVC패턴(프론트 컨트롤러 패턴)
- 공통의 기능들을 모아서 중심이 되는 컨트롤러를 통해
  두어 다른 컨트롤러들과 연결해서 사용
- 컨트롤러 인터페이스를 활용해서 다형성
  ( Map<String, inferface>  )

**** 종속성 없애기
- 해당 프레임워크에 쓰이는 어떠한 객체와 해당 객체의 메서드
  에서 파라미터로 받는 값의 타입을 자료구조로 만들어서 
  그 자료구조에 값들을 저장하고 난 뒤 마지막에 해당 객체의 메서드에
  옮겨준다 
   ( request.setAttribute(String, Object) 의 경우
   Map(String, Object) 의 자료구조를 생성하여 값을 넣은 후
   map.forEach((String, Object) -> request.setAttribute(String, Object)
   이런 식으로 옮겨준다) ) 
   (단, 매개변수가 3개 이상일 땐 어떻게 처리해야할까??)

5. MVC패턴(어댑터 패턴)
- 현재는 한가지 컨트롤러 인터페이스만 사용가능하다
- 하지만 여러가지 컨트롤러를 유연하게 쓰려면
  어댑터 패턴이 필요하다.

6.springMVC 전체 구조
- DispatcherServlet = frontController
-- 스프링 부트는 DispatcherServlet을 서블릿으로 자동으로 등록
-- doDispatch()메서드가 호출됨 (가장 중요한 메서드)(frontcontroller의 service메서드 느낌)
- 주요 인터페이스 목록
-- 핸들러 매핑 (HandlerMapping)
--- 핸들러 매핑에서 빈이름에 해당하는 핸들러를 찾음
--- RequsetMappingHandlerMapping(어노테이션 기반)(1순위) 
     BeanNameUrlHandlerMapping(빈이름으로 찾음)(2순위)
-- 핸들러 어댑터 (HandlerAdapter)
--- 찾은 핸들러를 실행시킬 핸들러 어뎁터를 찾고 실행
--- RequsetMappingHandlerAdapter(어노테이션 RequestMapping인것 처리)(1순위)
--- HttpRequestHandlerAdapter(인터페이스 httpRequestHandler인 것을 처리)(2순위)
--- SimpleControllerHandlerAdapter(인터페이스 controller를 처리)(3순위)
*** 핸들러 매핑, 핸들러 어댑터 모두 순서대로 찾고 없으면 다음순서로 넘어감
-- 뷰 리졸버 (ViewResolver)
--- application.properties에 등록한 spring.mvc.view.prefix, or ...suffix설정 정보를
     등록하여 물리주소를 정해줌
--- BeanNameViewResolver(빈이름으로 뷰를 찾아서 반환)(1순위)
--- InternalResourceViewResolver(jsp를 처리할 수 있는 뷰를 반환)(2순위)
-- 뷰 (View)

- 어노테이션
--@Controller -> 자동으로 스프링 빈으로 등록하고
                        어노테이션 기반 컨트롤러로 인식
--@RequestMapping 
---지정한 URL이 호출되면 해당 메서드 호출됨
--- 다중으로 URL지정 가능
---클래스 레벨에 적용시켜서 어노테이션 기반으로 동작하게 인식함
--- 클래스레벨에 적용시켜서 컨트롤러 메서드의 공통되는 물리주소를 적용시킬 수 있음
--- 파라미터에 method를 넣어주면 전송방식을 지정해줄 수 있음
---- @GetMapping, @PostMapping으로 대체 가능
--@RequestParam(이름)
--- RequestMapping에 들어갈 파라미터를 해당이름으로 직접 지정해줄 수 있음                                   
--- ex.) @RequestParam("user") == request.getParameter("user")

7.spring MVC 기본 

-로깅
-- 로그를 사용하는 이유
--- 쓰레드 정보, 클래스이름 같은 부가 정보도 확인가능하며 출력 여부를 상황에 맞게 조절가능
--- 파일로도 남길 수 있음

-- slf4j라는 로그라이브러르들을 통합해서 인터페이스로 제공하여 그것의 구현체로
    logback을 스프링에서 지원
-- @RestController
--- 반환 값으로 뷰로 인식하지 않고 Http메시지 바디에 바로 입력한다. 
-- log객체를 만들어서 해당 로그 객체의 메서드를 통해 로그를 남기는 방식
-- trace, debug, info, warn, error 메서드들로 로그를 남길 수 있으며 
    메서드들 간의 기능 차이는 없지만 로그 레벨이라는 것이 존재하여   
    메서드마다 의미를 두어서 사용한다!!
    trace, debug, info, warn, error 순으로 범위가 낮아짐

--로그레벨 기본설정
--- application.properties에서 설정 가능하다
--- logging.level.root = 로그레벨
---- 전제 로그레벨을 설정
--- logging.level.하위주소 = 로그레벨
---- 해당 하위주소에대한 로그레벨 설정

-- 롬복이 제공하는 어노테이션 중에 @Slf4j를 클래스레벨에 적용하여
     굳이 로그 객체를 생성할 필요가 없다
-- 올바른 로그 사용법
--- log.trace("data=" + data) vs log.trace("data={}", data)
--- 전자는 연산이 일어나기에 메모리를 씀 하지만
     info레벨만 확인하는 경우에도 전자의 경우 연산이 일어나게 되기에
     쓸데없이 리소스를 사용하게 된다.
     (즉 후자가 올바르다)

- 요청 매핑
-- PathVariable(경로변수)
--- @GetMapping("/hello/{userId}")
     public String method(@PathVariable("userId") String id)
--- 경로로 변수를 넣을 수 있으며 해당 메서드에서 경로변수를 사용할 수 있다.
--- 많이 사용됨
--- URL로 데이터를 끌고올 때 쿼리파라미터를 쓰는 방식, 경로변수를 쓰는 방식이 존재
--- 다중으로도 사용 가능하다
     (ex."/hello/{userId}/order/{orderId}"

-- 파라미터로 조건 매핑
--- 쿼리파라미터에 특정 값이 있어야지만 해당 매핑메서드 호출
--- 쿼리파라미터이기에 메서드에서 사용 가능
--- RequestMapping(value="", params = 조건)
--- ex . 조건 예시
          * params ="mode", 
          * params ="!mode" 
          * params ="mode=debug" 
          * params ="mode!=debug" (! = ) 

-- 헤더 값으로 조건 매핑
--- 해당하는 헤더 값이 있어야 해당 매핑메서드 호출
--- RequestMapping(value="", headers = 조건)

-- 요청 헤더의 미디어 타입 조건 매핑( Content-Type)
--- RequestMapping(value="", consume = 조건)

-- 요청 헤더의 Accept 값 조건 매핑( Accept)
--- RequestMapping(value="", produce= 조건)

- 요청 기본, 헤더 조회
-- 어노테이션 기반 컨트롤러의 메서드는 다양한 파라미터를 가질 수 있다.
-- 조회 가능한 값들
--- httpServletRequest, httpServletResponse, 
--- httpMethod : http메서드 조회
--- Locale : locale정보 조회 (언어 등)
--- @RequestHeader MutiValueMap<String, String> map : 모든 HTTP 헤더 값을 조회
---- MutiValueMap은 하나의 키에 여러 값을 받을 수 있음
---- get()하면 배열을 반환함
--- @ RequestHeader("헤더키") : 특정 헤더값 조회
--- @ CookieValue(value = "쿠키이름" , required = 필수값여부 ) String cookie : 특정 쿠키 값 조회

- 요청 파라미터
-- 단순타입의 경우 @RequestParam을 생략 가능

-- 필수 파라미터 여부 설정
--- @RequestParam(required=해당 파라미터 값 여부)
--- 기본값은 true
--- true인데 해당 파라미터 값이 없으면 400에러 발생
*** 자바에선 int는 null이 들어갈 수 없기에 null을 넣을거면 Integer을 써야함

-- 파라미터 기본값 설정
--- @RequestParam(defaultValue=기본값) 
--- 파라미터가 null이거나 빈문자 인 값들은 기본값으로 들어감

-- 파라미터를 Map으로 조회
---@RequestParam map<String, Object> param

--@ModelAttribute
--- (@ModelAttribute 객체 이름)
--- 요청 값들을 해당 객체에 넣어준 것을 파라미터로 사용 가능
--- 원리 : 객체를 생성하고 해당 객체의 프로퍼티를 찾아서 프로퍼티의 setter를 호출하여
             파라미터의 값을 입력(바인딩)한다.
--- @ModelAttribute도 생략 가능하다!
---- 하지만 생략 시 @RequestParam도 생략할 수 있어서 혼란이 발생)
---- 규칙이 존재
       (단순타입(String포함)은 @RequestParam, 그 외  @ModelAttribute)
--- @modelAttribute를 쓴 객체가 자동으로 model에 등록됨! (즉, model.addAttribute()를 쓸 필요가 없다)
     (@modelAttribute("이름") 이름을 따로 지정해주지 않으면 해당 객체의 클래스이름에서 첫글자를 소문자로 하여
       model에 자동 등록됨)
  
- 요청 메세지
-- message body에 직접 데이터를 담아서 요청하는 경우
-- 단순 텍스트의 경우
--- HttpServletRequest의 inputStream을 불러오는 방식으로 읽을 수 있다
     ex.)  ServletInputStream inputStream = request.getInputStream();        
            String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8);
             response.getWriter().write("ok");
--- 간단하게 파라미터에 inputStream을 받아서 간단하게 처리 가능 
    ex.) public void requestBodyStringV2(InputStream inputStream, Writer responseWriter) 
                   String messageBody = StreamUtils.copyToString(inputStream, StandardCharsets.UTF_8); 
                   responseWriter.write("ok");                 

--- 더 간단하게 파라미터에 HttpEntity<>를(메세지 컨버터) 이용하여 처리 가능
     ex.) public HttpEntity<String> requestBodyStringV3(HttpEntity<String> httpEntity)
                    String messageBody = httpEntity.getBody();
                    return new HttpEntity<>("ok")
---- HttpEntity : http 헤더, 바디 정보를 편리하게 조회 가능
      (단 요청파라미터와는 전혀 관계 없음)
      (요청, 응답 모두 사용가능)                 

--- 더욱 간단하게 파라미터에 @RequestBody 를 이용하여 처리 가능
     ex.) public String requestBodyStringV4(@RequestBody String messageBody)    
                    return "ok";
---- @RequestBody : 메시지 바디 데이터를 조회 가능
       (단, 헤더 정보가 필요하다면 HttpEntity, @RequestHeader 사용)
       (@RequestBody는 String만이 아니라 직접 만든 객체타입으로 지정할 수 있다)
       (생략 불가능)

-- JSON의 경우

--- Jackson의 objectMapper()을 이용해서 inputStream으로 읽고 
     해당 메세지 바디를 readValue로 객체로 변환

--- 간단하게 @RequestBody를 이용하여 메세지 바디 값을 문자로 읽고
     해당 메세지 바디를 readValue로 객체로 변환

--- 더 간단하게 @RequestBody, 또는 HttpEntity를 해당 객체로 읽어옴

*** @ResponseBody가 메서드 레벨에 있는 경우 return값을 객체로 두면
     자동적으로 응답 값을 JSON으로 컨버트해줌!
      (단, Accept가  application/json 이어야 한다)

- 응답 정적리소스
-- 정적인 HTML을 제공[참고 39페이지]
-- src/main/resources의 /static, /public, /resources,/META-INF/resources
   해당 경로는 스프링부트에서 정적리소스 서비스를 제공함
- 응답 뷰템플릿 
-- 동적인 HTML 제공하는 서버사이드 렌더링
-- 스프링부트에서 기본 경로는 src/main/resources/templates

- HTTP 메시지 사용
-- API제공하는 경우

-- 응답 메세지 제공 방법
--- 단순텍스트의 경우
---- HttpServletResponse 의 getWriter().write()를 이용한느 방법
---- 더 간단하게 ResponseEntity<>를 사용하여 리턴값으로 ResponseEntity<> 객체를 반환
     (생성할때  new ResponseEntity<>(메세지바디, http상태값) 가능하다)
---- 더욱 간단하게 메서드레벨에 @ResponseBody을 넣고 리턴값으로 문자열

--- JSON의 경우
---- ResponseEntity<>를 사용하여 리턴값으로 ResponseEntity<> 객체를 반환하여
      생성자에 객체을 값으로 넣음
      ex.)  return new ResponseEntity<>(helloData, HttpStatus.OK); 
---- 더 간단하게 @ResponseBody넣고 리턴값으로 객체을 반환
      (상태코드를 지정해주고 싶다면 메서드 레벨에 @ResponseStatus(상태코드)를 넣어줌)

- HTTP 메세지 컨버터
-- @ResponseBody를 사용하면 뷰리졸버가 아닌 메세지 컨버터가 동작하게됨
--- 기본문자는 StringHttpMessageConverter
     기본객체는  MappingJackson2HttpMessageConverter 

-- HTTP컨버터는 요청 응답 둘다 사용됨

-- 우선순위 (클래스타입과 메디어타입 둘을 체크하여 컨버터 결정) [참고 47]
--- ByteArrayHttpMessageConverter (1순위)
---- byte[]데이터를 처리하며 클래스타입이 byte[], 미디어타입이 */*
---- 요청 시  @RequestBody byte[] data 
---- 응답 시  @ResponseBody return byte[], 미디어타입 application/octet-stream
--- StringHttpMessageConverter  (2순위) 
---- String문자로 데이터 처리하며 클래스타입은 Stirng, 미디어타입은 */*
---- 요청 시  @RequestBody String data 
---- 응답 시  @ResponseBody return "", 미디어타입은 text/plain
--- MappingJackson2HttpMessageConverter (3순위)
---- 클래스타입은 객체, HashMap, 미디어타입은 application/json
---- 요청 시  @RequestBody 객체 data 
---- 응답 시  @ResponseBody return 객체, 미디어타입 application/json

-- HTTP 요청 데이터 읽기 순서
---HTTP요청이 오고 컨트롤러에서  @RequestBody, HttpEntity를 사용하면
    메세지 컨버터가 작동하고 우선순위에 따라 작동할 컨터버를 찾음(canRead())
    작동할 컨버터를 찾으면 컨버터의 read()를 호출하여 객체를 생성

-- HTTP 응답 데이터 읽기 순서
---컨트롤러에서  @RequestBody, HttpEntity의 값이 반환되면
    메시지컨버터가 메세지를 쓸 수있는 컨버터를 찾음(canWrite())
    작동할 컨버터를 찾으면 컨버터의 write()를 호출하여 http응답 메시지바디에 데이터를 생성

-- 동작방식
--- 메시지 컨버터는 핸들러 어댑터쪽에서 동작한다
--- 요청의 경우 @RequestBody, HttpEntity를 처리하는 argumentResolver들은
     메시지컨버터를 사용하여 파라미터의 필요한 값들을 생성함!!
--- 응답의 경우 @ResponseBody와 HttpEntity 를 처리하는 ReturnValueHandler들은
      메시지컨버터를 사용하여 응답 값을 생성 
--- 알아야할 구조
---- argumentResolver
----- 핸들러 어댑터에서 컨트롤러의 메서드를 쓸때 
      메서드의 다양한 파라미터 타입의 값들을 넣어주는 리졸버
----- --- 어뎁터에서 필요한 파라미터를  argumentResolver를 이용하여
     파라미터를 준비하고나서 컨트롤러의 메서드를 실행 

---- ReturnValueHandler
----- 컨트롤러 메서드를 반환할때 응답값으로 처리해주는 역할


 