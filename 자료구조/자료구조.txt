자료구조
- Array
> Array.asList() vs List.of() 비교
>> 공통점
>>> 둘다 배열을 리스트로 변환하는 메서드
>>> 둘다 가변이 아닌 Capacity불변 리스트이다.
        (asList의 경우 set 메서드는 가능)
        (해당 메서드의 return값은  java.util.ArrayList 아니고
         해당 클래스의 내부 클래스이다. 그러기에 가변적인 리스트가 아님)
        (불변으로 만들어진 이유는 불변이라는 이점을 이용해
         다른 컬렉션 자료구조로 변환하기 용이하기 위해서이다
          ex. new ArrayDeque<>(List.of(1,2,3))
         )
>>> 불변객체의 이점
>>>> 1. 스레드 안정성 : 불변객체는 추가, 삭제가 안되기에
           안전하게 공유 가능
>>>> 2. 캐시 : 변경 불가능한 개체는 항상 동일한 상태를 유지하기에
            캐시하고 재사용하기 좋음

>> 차이점
>>> List.of의 경우 원본 배열의 값이 변경되면 리스트의 값은 변경되지 않음
       asList의 경우 원본 배열의 값이 변경되면 리스트값도 변경되고 (배열을 생성후 데이터를 일일히 넘김)
                          리스트값이 변경되면 원본배열의 값도 변경됨 (배열 주소값을 그대로 참조)
>>> List.of의 경우 원소에 null을 가질 수 없다
       asList의 경우 원소에 null을 허용

- ArrayList 
> 메모리에 연속적으로 나열되어 있으며
   주소로 연결되어 있는 형태라 index를 통한 접근 속도가
   배열보다는 느리다.
> ArrayList의 경우 객체 데이터만 다루기 때문에 
   원시타입의 경우 랩핑이 이루어져 더 무거워짐
   그리고 주소로 연결하기 때문에 다음인덱스의 주소값 크기가 더해져
   데이터 크기가 더 늘어남
> ArrayList는 생성할 때 용량을 지정하여 생성할 수 있다.
   ensureCapacity()메서드로 생성 이후에도 지정 가능
> 해당 용량을 넘어서 데이터를 적재할 경우
   자체적으로 내부 배열을 큰사이즈로 만들고 나서
   기존 배열에 적재한 요소를 복사하여 옮긴다.
   (이 과정이 리소스를 많이 먹음 = 배열복사후 옮김)
> ArrayList도 동기화를 위해 Collections클래스에서 
   synchronizedList() 메서드를 지원하여 동기화된 리스트를
   만들 수 있다.
   (synchronizedList() 이외에도 Map, Set도 해당 동기화 기능이 존재)  
- Vector
> 동기화가 되어 있어 멀티쓰레드 환경에서 안전하다지만
    메서드에만 동기화가 걸려있기 때문에 인스턴스 자체는
    동기화 되어 있지 않기때문에 필드 값이 잘못 들어갈 수 있다.
    (ex.필드 값 : size값)
    그래서 외부에서 Vector객체 자체에 동기화를 걸어주어야함
> 성능 구데기  ArrayList의 2배 시간이 걸림

- LinkedList
> 적재된 데이터끼리 주소 포인터를 서로 가리키며 링크(참조)함으로 이어지는 구조
> 단방향, 양방향, 양방향원형으로 3가지가 존재
>> 단방향은 한방향으로 밖에 못감 이전으로 가려면 다시 처음부터 서치
>> 양방향은 이전, 이후로 갈 수 있어서 이전으로 가기 용이
>> 양방향 원형은 맨끝과 맨앞이 연결된 구조
> 데이터가 추가,삭제되어도 앞으로 당기거나 뒤로 미는 동작이 없음
    (메모리에 불연속적으로 존재하여 공간제약이 존재하지 않기에!)
    (추가되거니 삭제될 노드 위치의 바로 앞,뒤의 노드참조만 변경하면됨)
   (삭제, 추가에 용이)
> 데이터가 추가될때 노드 주소값을 참조해야하므로 추가적으로 메모리를 쓴다
> 모두 삭제의 경우 단번에 제거하는 것이 아닌 일일히 노드를 null로 설정하기에
    시간이 걸림
> 요소 접근할 때 순차접근만 가능하기에 성능이 좋지 않음
    (ArrayList는 무작위 접근이 가능)
 
- stack
> LIFO구조를 가지는 후입선출 자료구조이다.
> Vector클래스를 상속받음
>> Vector를 상속받기에 강하게 결합되어 있고 Vector는 
     쓰레드 안정성도 어중간한 클래스기에 자바의 stack은 쓰이지 않는다
     (대신 Deque를 많이씀)
> 데이터 추가 : push 
> 데이터 뺌 : pop




   