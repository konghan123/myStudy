1. 타임리프

- HTML을 동적으로 렌더링하는 용도로 사용
- 순수 HTML을 최대한 유지하는 특징
- 타임리프로 작성된 파일은 HTML마크업 결과가
  어떻게 되어있는지 파일만 보고 확인 가능
- 순수 HTML을 유지하면서 뷰 템플릿도 사용 할 수
   있는 것이 타임리프의 장점이며 '네츄럴 템플릿'이라고 한다.
- 스프링과 통합지원함.

2. 타임리프의 기본 기능

- 타임리프 사용 선언
-- <html xmlns:th="http://www.thymeleaf.org">

- 텍스트
-- th:text (ex. span th:text="${data}")

-- [[${data}]] >> 태그 안이 아닌 바깥에 출력하고 싶은 경우 

-- 이스케이프
--- HTML 엔티티
---- '<'의 경우 HTML에서 태그의 시작으로 인식한다
---- 그래서 해당 문자('<')를 문자 그대로 보여주는 것

--- 특수문자를 HTML 엔티티로 바꾸는 것이 이스케이프라고 함

--- 반대로 변환한느 것을 언이스케이프라고함

--- th:utext >> 이스케이프 기능을 끈 텍스트

--- [(${data})] >> 태그 안이 아닌 바깥에서 텍스트출력(언이스케이프) 

- 변수
-- ${data}

-- object
--- user.name
--- user['name']
--- user.getName()

-- List
--- list[0].name
--- list[0]['name']
--- list[0].getName()

-- Map
--- map['userA'].name
--- map['userA']['name']
--- map['userA'].getName()

-- 지역변수 선언
--- th: with="변수이름=${data}"


- 웹 기본 객체
-- ${#기본객체} 
ex. ${#request}, ${#session}, ${#response}
 (단, 스프링부트3.0부터는 기본객체를 지원하지 않음)
 (${#locale} 이건 지원함)

-- 편의 객체
--- ${param} >> http 요청 파리미터 편리 접근
  ex. param.파라미터  
--- ${session} >> 세션 편리 접근
  ex. session.담아둔값
--- ${@스프링빈.메서드} >> 스프링빈 접근
  ex. ${@helloBean.hello('')}

- 유틸 객체

-- 유틸 객체들 (앞에 ${}붙임)
#message: 메시지, 국제화 처리 
#uris: URI 이스케이프 지원 
#dates: java.util.Date 서식 지원 
#calendars: java.util.Calendar 서식 지원
 #temporals: 자바8 날짜 서식 지원
 #numbers: 숫자 서식 지원
 #strings: 문자 관련 편의 기능
 #objects: 객체 관련 기능 제공
 #bools: boolean 관련 기능 제공
 #arrays: 배열 관련 기능 제공
 #lists, #sets, #maps: 컬렉션 관련 기능 제공 
#ids: 아이디 처리 관련 기능 제공, 뒤에서 설명

- URL 링크
-- 절대경로 vs 상대경로
--- /경로 >> 절대경로
--- 경로 >> 상대경로

-- th:href="@{경로}"

-- 경로에 쿼리 파라미터 추가
   @{경로(param1=${param1}, param2=${param2})}
   @{경로?param1=${param1}&param2=${param2}}

-- 경로에 변수 두기
   @{경로1/{변수경로1}/{변수경로2}(변수경로1=${변수경로1}, 변수경로2=${변수경로2})}
   
-- 경로변수 + 쿼리파리미터
   @{경로1/{변수경로1}(변수경로1=${변수경로1}, 변수파람2=${변수파람2})}
    >> 경로/변수경로1?변수파람2=변수파람2 

-리터럴
-- 소스 코드상에서 고정된 값
ex. hello > 문자 리터럴
     10    > 숫자 리터럴

-- 리터럴 종류
--- 문자 , 숫자, 불린, null

-- 타임리프의 문자 리터럴은 항상 ''(작은다옴표)로 감싸야함!!
  ex. <span th:text="'hello'">
--- 공백없이 이어진다면 다옴표 생략 가능!!!
  ex. <span th:text="hello">
--- 만약 문자열에 공백이 들어간다면 생략 불가능
--- || 를 통해 리터럴 대체문법을 통하여 문자열로 치환시켜줌
  ex. <span th:text="|hello ${data}|">

- 연산

-- 비교연산자
---  >(gt), <(lt), >=(ge), <=(le), !(not), ==(eq), !=(neq, ne) 
  ("" 내에서 사용 가능)
--- gt 대신 &gt; 이렇게도 사용가능!

--- '?'를 통해 삼항연산자도 사용가능!

--- '?:'를 통해 있으면 해당 값을 없으면 :뒤에 값을 불러옴

--- '_'를 통해 해당 태그 타임리프를 무효화시킴(타임리프 태그 렌더링을 안함)

- 속성값 설정

-- th:속성 으로 속성을 지정하면 타임리프는 기존 속성을 지정한 속성으로 대체함
    (단, 기존 속성과 지정한 속성의 이름이 같을때)
    (지정한 속성이 없다면 새로 만든다)

-- 속성 추가  

--- th:attrappend >> 지정 속성 값 뒤에 값을 추가
   ex. th:attrappend="속성이름="' 값'"
--- th:attrprepend >> 지정 속성 값 앞에 값을 추가
--- th:classappend >> class속성에 자연스럽게 값 추가
   ex. th:classappend = "값"

-- 체크 값 처리

--- th:checked ="on/off"

- 반복

-- th:each="컬렉션변수 : ${컬렉션}"
-- th:each의 첫번째 변수는 컬렉션변수
                 두번째 변수는 반복상태값변수
                 로 지정됨
   ex. th:each="컬렉션변수, 반복상태값변수 : ${컬렉션}"  
   (굳이 반복상태값변수를 추가하지 않더라도 해당변수명 + Stat으로 자동으로 지정됨)

-- 반복상태값 변수의 프로퍼티
--- index: 0부터 시작하는 값 
--- count: 1부터 시작하는 값 
--- size: 전체 사이즈 
--- even, odd: 홀수, 짝수 여부(boolean) 
--- first, last:처음, 마지막 여부(boolean) 
--- current: 현재 객체

- 조건부(if)

-- th:if="조건" >> 해당 조건에 충족되면 태그 렌더링
   (단, 해당 조건에 충족되지않으면 해당 태그 자체가 나타나지 않음)
   ex. th:if="${user.age lt 20}"
-- th:unless="조건" >> 그 반대
-- th:switch="변수" >> 자바의 switch문 처럼 사용가능
    (case="*"인 경우 자바에서 default랑 같다)
ex.  <td th:switch="${user.age}">            
            <span th:case="10">10살</span>           
            <span th:case="20">20살</span>          
            <span th:case="*">기타</span>        
       </td> 	
     
- 블록
-- <th:block>
-- 타임리프 특성상 태그 안에 속성으로 기능을 정의해서 사용하는데
    굳이 새로운 태그를 만들지 않고 타임리프 속성만을 이용할 때가 있음
    그럴 때 사용된다 (each, if) 등등

- 자바스크립트 인라인
-- <script th:inline="javascript">
-- 변수 매핑 >> [[${변수}]]
--장점
--- 자바스크립트의 변수에 값을 넣어줄때 타입마다 자동적으로 맞춰줌
--- 주석처리되어 있는 값을 매핑해줌 (네츄럴 템플릿)
     (HTML을 안깨고 업무를 진행할 수 있음)
--- 객체를 넣어줄 때 자동으로 JSON형태로 넣어줌
     (기존에는 toString()으로 불러옴)

-- 인라인에서 each쓰기
--- [# th:each="컬렉션변수 : ${컬렉션}"]
        반복...
     [/]

- 템플릿 조각
-- 페이지 개발할 때 공통영역으로 재활용하는 경우가 있다
    그것을 조각으로 만들어놓고 간편하게 쓸 수 있음
-- th:fragment="조각변수"
    (템플릿 조각 선언)

-- <태그 th:insert="~{경로 :: 조각변수}"
    (해당 태그 안에 조각 삽입)

-- <태그 th:replace="~{경로 :: 조각변수}"
    (해당 태그를 조각을 대체)

-- th:fragment="조각변수 (파람1, 파람2)"
    (템플릿 조각 선언 및 파라미터 선언)

-- <태그 th:insert="~{경로 :: 조각변수 (파람1, 파람2)}"
    (해당 파람1,파람2가 넘어간 값의 조각을 렌더링)

-- 템플릿 레이아웃
--- 일부 코드 조각들을 레이아웃으로 넘김
--- <태그 th:insert="경로 :: 조각변수(~{::넣을 태그1}, ~{::넣을 태그2})
     (태그를 파라미터로 넣어 해당페이지에서 해당 태그를 넘겨 렌더링)
--- ${넣을 태그1} 
     (조각 템플릿에 해당 태그에 파라미터가 붙으면 넘어오는 값에 매핑됨)
   
- 입력 폼 처리
-- 타임리프가 제공하는 입력 폼
-- th:object="${오브젝트}" >> 빽단에서 들고오는 데이터 객체를 지정
--- *{...} >> th:object에 지정된 객체에 접근
      (${오브젝트.id}를 더 간단하게 *{id}로 가능)  
-- th:field="${데이터}" >> 해당 태그의 id,name,value속성을 자동으로 처리해줌
 
- 체크박스
-- 체크했으면 on이라는 값이 넘어감
   (스프링은 on 문자를 true타입으로 변환해줌)
   (기존 HTML 체크박스는 체크안하면 서버에 값 자체를 보내지 않음)
   (사용자가 의도적으로 체크를 해제시 아무것도 넘어가지 않음)
   (Spring의 경우 _on의 태그 네임을 가진 값만 전송된 경우 체크박스 값을 false로 변경함)

-- 체크박스에 th:field를 넣어주면 자동으로 히든 인풋 태그까지 만들어줌
-- 값이 true면 자동으로 checked 프로퍼티를 넣어줌

*** @ModelAttrinbute("이름")
    메서드단에 해당 어노테이션을 쓰면
    해당 메서드의 반환값을 자동으로 해당이름으로 모델에 담아줌

-- 멀티 체크박스

--- 동적 아이디 프로퍼티 생성
---- 루프문을 돌려서 id프로퍼티 값이 달라야할 경우
       루프문에 맞게 동적으로 id프로퍼티를 맞출 수 있는 기능이 있다.
---- #ids.prev('컬렉션') , #ids.next('컬렉션') 
---- th:for="${#ids.prev('regions')}"   

*** Enum
-- Enum클래스.values() >> Enum에 등록된 데이터 배열형태로 가져옴
-- Enum데이터.name() >> 해당Enum데이터의 이름을 가져옴(String타입)
-- 타임리프는 Enum에 직접 접근가능하다 
    (Enum 메서드 사용 가능)

- 라디오버튼
-- 체크박스와 같지만 hidden인풋은 들어가지 않음
    (무조건 한개는 선택이 되기 때문)

3. 메시지
- 다양한 하드코딩 값을 한곳에서 관리하는 것
- .properties파일에 key, value값을 둠
- 언어적용도 가능 (http헤더의 accept-language를 이용)
- 스프링에서도 기본적으로 제공함 
- 메시지 소스 세팅
-- application.properties 파일에 
     spring.messages.basename=messages  

-- 소스 세팅 시 스프링에서는 자동으로 빈으로 등록됨
 
-- basename에 맞는 메세지 properties파일을 만들어준다

- 메시지 사용
-- MessageSource 객체를 사용
-- MessageSource 객체.getMassage(code, 매개변수, 기본 메세지, Locale.getDefault())
-- 매개변수를 사용할 시 프로퍼티 파일에 key 값에 매개변수가 있어야하며
    ex. {0}, 해당 매개변수를 사용할 때 매개변수에 new Object[]{"메세지값"}을 넣어줌
    그렇게 하면 해당 value + 메세지값 으로 메세지를 보여줌
-- locale을 지정해주면 언어에 맞는 프로퍼티 파일을 읽어서 메시지를 보여줌
  ex. MessageSource 객체.getMassage(code, 매개변수, 기본 메세지, Locale.KOREA)
-- locale이 null일 경우 시스템 기본 locale을 불러와 ko_KR이므로 message_ko.properties를 불러옴

- 타임리프에서 메시지 사용
-- th:text=#{프로퍼티key값}
-- th:text=#{프로퍼티key값(${프로퍼티 key값})}
   (매개변수 사용법)

    
 