1. DB 키
- 기본키 선택 전략
-- 기본키 : 유일하며, 변해선 안되며 null이 혀용되지 않는 값

-- 자연키 : 비즈니스에 의미 있는 키
            (ex. 이메일, 전화번호, 주민번호)

-- 대리키 : 비즈니스와 관련없는 임의 키
  (대체키)  (ex. 오라클 시퀀스, auto_increment)

-- 자연키보다는 대리키를 권장


2. JDBC Template
- 스프링이 제공하며 SQL을 직접 사용하는 경우 
   편리하게 사용 가능
- 스프링 라이브러리에 포함되어있으며 복잡한 설정이 필요없다
   (Spring-jdbc 라이브러리만 추가하면됨)

- 장점 : 반복작업을 줄여줌

- 단점 : 동적SQL을 해결하기 힘듬
  
- 이름을 지정하여 파라미터를 바인딩하는 기능을 제공
   (이전에는 ?를 통해 순서대로 바인딩해주었는데
    해당 바인딩은 이후 sql문을 변경할 때 순서대로 바인딩하기 때문에
    매우 치명적으로 작용한다)

3. 테스트
- 데이터베이스 연동
-- @SpringBootTest라는 어노테이션이 있으면
    해당 테스트 실행 시 @SpringBootApplication을 찾아가서 설정으로 사용함

- 데이터베이스 분리
-- application.properties에서 개발 DB로 변경해줌

- 데이터베이스 데이터 롤백

-- 방법1. 테스트 클래스에 트랜잭션매니저를 주입받아서 사용
             (스프링 부트는 자동으로 적절한 트랜잭션 매니저를 스프링빈으로 등록해줌)

-- 방법2. @Transactional을 클래스단에 넣어줌
             (해당 어노테이션은 문제가 없으면 커밋을하지만 
              테스트에서 적용하면 테스트가 끝나면 자동으로 롤백함) 
              (서비스, 리포지토리 단에 적용한 @Transactional도 테스트에 트랜잭션과
               같은 트랜잭션을 사용한다)
              (만약 커밋된 상태를 보고싶다면 클래스단에 @Commit을 추가하면됨)

- 임베디드 모드 DB - 테스트 
-- DB를 애플리케이션에 내장해서 함께 실행한다고 해서
    임베디드 모드라고 함 (DB를 켜지않아도 실행됨)

-- 이렇게 만든 DB는 테이블이 없어서 테스트가 불가능하다
   
--- 스프링부트에서는 파일하나로 애플리케이션 실행할때
    테이블을 생성할 수 있다
     resources -> schema.sql이라는 파일을 생성하여
     그 안에 CREATE sql을 넣어준다 

--- 더 간단한 방법은 스프링부트에서는 test의 데이터정보를 넣지 않으면 자동으로 
     임베디드 모드로 설정되어 테스트를 원할히 진행할 수 있다.   


