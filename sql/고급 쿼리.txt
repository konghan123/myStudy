1. SELECT 연산 고급 활용

- 쿼리 논리 처리 순서
-- FROM >> JOIN >> WHERE >> GROUP BY
   >> HAVING >> SELECT 컬럼 >> ORDER BY

- BATCH란?
-- 한번에 1개 이상의 쿼리를 실행하는 것을 1BATCH
-- 로컬변수는 동일한 Batch 내에서만 참조 가능
-- 동일한 Batch에서 변경된 개체는 비인식
-- Compile 오류 시 Batch전체 취소
-- Runtime 오류 시 대부분 Batch 중단
    (제약 조건 위반은 현재 구문만 취소, 나머지 실행)

-- 배치 지시어
--- GO ( SSMS같은 SQL Server 유틸리티에서 지정해 사용 가능
--- GO[count] : 현재 배치를 [count]만큼 반복 수행

-- EXEC
--- 여러 프로시저를 한 배치에 실행시킬 때 구문 앞에 EXEC를 넣어줌

- SELECT-LIST 속성,동작 이해
-- SELECT 컬럼에 변수를 할당한 경우 변수값 처리는
   순차적으로 일어남
   (앞 컬럼에서 변수에 +1해줬다면 이후 컬럼에서 해당 변수를
    참조할 때 +1된 변수 값을 참조함)

-- SELECT에서 변수 할당과 검색을 동시에 불가능하다.

-- 스칼라변수의 값이 다중일 경우 마지막에 참조된 값이 참조됨

- 데이터 유형과 함수

-- 숫자

--- bit 
---- 0,1, null 값을 가짐
---- 문자, 숫자는 다 1
---- false이면 0, true이면 1

--- 정수
---- tinyint(1byte), smallint(2byte), int(4byte), bigint(8byte)

--- 실수
---- 고정 소수점 (decimal(값, 소수점) , numeric())

---- 부정 소수점 (float(8byte), real(4byte))
----- 정확한 숫자가 필요한 일반 업무에서는 비권장함

---- 통화 데이터 (money(8byte), smallmoney(4byte))
----- 일반적으로 잘 안쓰임 숫자에 FORMAT함수를 씀

---- 반올림, 올림, 내림
----- 특정 자리수 반올림 (ROUND(값, 자리수))
----- 특정 자리수 올림 (ROUND(값 + 가중치(0.4), 자리수))
----- 특정 자리수 내림 (ROUND(값, 자리수, 1))

----- 정수 올림 (CEILING())
----- 정수 내림 (FLOOR())

---- 0숫자로 채우기 (RIGHT(CONCAT(), REPLACE(STR()))

-- 문자

--- 고정길이 (char(일반문자), nchar(유니코드))
---- 선언 크기 만큼 공간(공백)을 차지 
---- 후행 공백이 생김

--- 가변길이 (varchar(일반문자), nvarchar(유니코드))
---- 후행 공백은 명시적으로 지정 시 생김

-- 날짜시간
--- DATETIME(8byte), SMALLDATETIME(4byte)

--- DATETIME2(소수자리수 -7까지 표현)

--- 월별 일수 구하기
---- EOMONTH(날짜) 당월 
---- EOMONTH(날짜, -1) 전월
---- EOMONTH(날짜, 1) 명월
---- DATEPART(DAY, EOMONTH(날짜)) 일자 구하기



-- 새로운 함수들
--- TRY_CONVERT() : 데이터 형변환 시 사용되며 실패 시 오류 대신 NULL 반환
--- TRY_PARSE() : 문자열 데이터형 변환 시 사용되며 실패 시 오류 대신 NULL 반환
--- CHOOSE (index, value1,value2 ...) : 나열 중 지정한 index값 반환
--- FORMAT(값, 포맷형식, 유니코드)

- NULL의 이해

-- 할당되지 않는 값

-- NULL 연산시 무조건 NULL

-- NULL은 비교연산이 불가 IS NULL, IS NOT NULL 만 가능

-- NULL의 IN, NOT IN
--- IN 의 경우 해체하면 a =  1 or a = 2 or a = null 인데
    a = null인 부분을 무시함

--- NOT IN의 경우 해체하면 a <> 1 and a <> 2 and a <> null
    NULL을 and로 결합하기 때문에 값이 없음
    (NOT IN 안에 서브쿼리가 올때 NULL값이 올 수 있다면 절대 NULL로 올 수 없게 처리해야함)

-- NULL은 최솟값으로 취급

-- 구문
--- ISNULL(값, 대체 값) >> 값이 NULL일 때 대체 값으로 매핑 
     
--- COALESCE(값, 값, 값) >> NULL이 아닌 첫번째값을 반환
    (중첩 CASE를 없앨 수 있다)

--- NULLIF(값, 값) >> 동일한 값이면 null, 아니면 첫번째값 반환
    (아닌 값 반환하기 좋음)

- CASE 문
-- 행 단위 조건 처리 유리

-- 주의 사항
--- THEN절에서 서로 다른 데이터 형을 반환하는 경우
---- 암시적으로 작은 타입을 큰타입의 형으로 맞추기 때문에 데이터 정합성 문제가 생길 수 있음
     (1 + '2' 는 3이라는 결과가 나옴)

--- ELSE 절이 없는 경우 NULL 반환

-- CASE문 평가 전에 내부 식이 먼저 계산되는 경우
    (WHEN,THEN절에 함수가 있을 경우 먼저 실행됨) 

- TOP(n)
-- 상위 n개만 표시
-- ORDER BY에 영향을 받음 (동률값에 대한 정리 필요!)
-- 클러스터 인덱스가 있어도 ORDER BY를 써야함

- 난수처리
-- RAND(seed) >> 부동소수점, 동일 seed에 동일결과
   (seed값 없이 사용하면 0~1사이 난수 리턴)
   (행단위가 아닌 쿼리단위로 한번 호출됨)
-- NEWID() >> 랜덤으로 고유값을 생성

2. DML (data mutipulation language )

- VALUES (테이블 값 생성자)
-- 테이블 입력으로 사용됨

-- 용도
--- FROM() 파생테이블 ex. ( FROM(VALUES (1),(2),(3) ) )
--- INSERT... VALUES
--- MERGE의 USING

- INSERT, UPDATE, DELETE + TOP()
-- 변경될 데이터 갯수를 제한할 수 있다.

- UPDATE SET절 고급 활용
-- UPDATE 테이블 SET @변수 = 값 = 연산식  
  (이런식으로 사용 가능)

-- UPDATE 테이블 SET
    , 값1      = 값2
    , 값2      = 값1
    (이런식으로 값 교환 가능) 

- INSERT, UPDATE, DELETE + OUTPUT
-- 문법 : OUTPUT , deleted / inserted / 테이블이름 + . + 컬럼이름
         (OUTPUT에 명시값도 지정 가능 ex. ' ', 2, 'ㅇㅇ'

-- 변경(전/후) 행 데이터 반환

-- 테이블 입력 후 재활용 가능

- Composable DML 
-- OUTPUT 결과를 테이블 입력으로 사용

ex. INSERT INTO 테이블1(output값1,output값2,output값3)
    SELECT output값1,output값2,output값3
    FROM(
             UPDATE 테이블2
                   SET  a = b
             OUTPUT 
                  inserted.output값1 as output값1,
                  deleted.output값2 as output값2,
                  inserted.output값3 as output값3
     ) D

- INSERT + EXEC
-- INSERT 테이블 
       EXEC 테이블을 호출하는 프로시저, 동적테이블

- MERGE
-- 일명 UPSERT

-- 주의 사항
   MERGE문은 동일한 행을 여러번 적용시킬 수 없음
    (오류 발생)

- 시퀀스 이해
-- DB단위의 순번 중앙 저장소
-- 디폴트 타입은 bigint

- 임시테이블 
-- 유용한 경우
--- 동일 행들에 대한 중복, 반복, 집계 처리가 필요한 경우
--- 중간 결과 저장 및 재활용
--- 대량 조인 UNION 집계 쿼리 단순화
                  
-- 특징
--- tempdb에 물리적으로 저장
--- # > local (현재 세션용) 
--- ## > global (전체 세션 공유)
    (전역 임시테이블의 경우 참조하고 있는 모든 세션이 종료되면 삭제됨)
--- 인덱스도 가능

--- 테이블 변수와는 차이가 있음
     (테이블 변수가 좀 더 가벼움)

-- 생성
    CREATE TABLE #임시테이블 ( )

- 동적쿼리 - EXEC() vs sp_excutesql
-- 문자열로 구성된 동적 쿼리가 필요할때!
-- 가급적이면 sp_excutesql을 쓰는것이 좋다
    (EXEC()은 SQL 인젝션을 당할 확률이 크고 컴파일 부하도 적음)

ex. sp_excutesql 예시

    DECLARE @sql varchar(3000)
    
    SET @sql = 'SELECT ' + @변수 + 'FROM' + @변수
    PRINT @sql;

    EXCE sys.sp_exceutesql
       @statement = @sql
       @params = '변수이름1 변수타입1, 변수이름2 변수타입2'
       @변수이름1 = 변수
       @변수이름2 = 변수
       (OUTPUT도 가능)

- 프로시저 배열 값 넘기기
-- STRING_SPLIT('값1 값2 값3' , 분리기준값)
   (테이블처럼 사용하여 값마다 행으로 생성됨)
ex. SELECT * FROM STRING_SPLIT('값1 값2 값3' , 분리기준값)


3. 집합과 관계연산

- 조인
-- 조인 유발 원인
--- 다른 테이블의 컬럼값을 가져오기 위해 >> 정규화된 테이블 >> 중복된 값을 제거하기 위해 
     >> 처리되는 데이터 양을 줄이기 위해

-- 목적
--- 분리된 열 재결합

--- 행복제 (중복 행 생성)

--- 일치 행 검색과 결합 (INNER JOIN : 불일치 행 제거)

--- NULL값 생성 (OUTER JOIN : 차집합 포함 )

-- 조인 유형
--- CROSS JOIN
---- 양쪽 테이블의 행을 곱한만큼 열이 만들어짐
---- 조인 조건은 없음 (ON이 없다)


--- INNSER JOIN
---- 교집합(중복 허용)

--- OUTER (LEFT,RIGHT,FULL) JOIN 
---- 차집합 + 교집합

--- SELF JOIN

-- 조인 조건 과 검색조건의 차이
--- 의미에 맞게 구분해서 지정 
---- 조인조건 : 두 테이블을 매칭하는 조건
---- 검색조건 : SELECT 결과집합을 결정하는 조건

--- INNER JOIN 의 경우 두조건 모두 상관없음

--- OUTER JOIN의 경우 어디에 두는지에 따라 결과가 달라짐

     (단, 특수한 경우 성능차이가 존재)

- INTERSECT
-- 두 SELECT의 중복 값만 표현 (교집합)
   ex. SELECT *** FROM
       INTERSECT
       SELECT *** FROM

- UNION (ALL)
-- 두 SELECT를 합쳐서 보여줌 (합집합) 

-- UNION은 중복원소를 제거한 결과값을 보여줌

- 서브쿼리
-- 유형
--- 중첩 ( 단독으로 실행 가능한 형태)
--- 상관 ( 외부 테이블 열 참조)

-- 내부적으로 조인으로 변환되어 실행됨

-- 조인으로 한계가 있을 때 사용

-- rowNuber 구하기 활용
   SELECT rownum = (SELECT COUNT(*)
                             FROM ORDER O
                             WHERE N.ORDER_ID <= O.ORDER_ID
                            )
      FROM ORDER N

-- 주의사항
--- NOT IN을 조건으로 서브쿼리를 사용 시 
     해당 서브쿼리는 NULL이 반환되는 경우가 있으면 안됨

--- 서브쿼리 내에서는 반드시 해당 테이블 별칭을 지정해서 컬럼을 써야함
    (안그럴 경우 외부 컬럼을 참조하여 잘못된 결과값을 보여줌)
    (UPDATE, DELETE의 경우 큰 사고 발생!!!)

- 테이블 표현식
-- 파생테이블
--- FROM() 절의 서브쿼리
--- 단독으로 실행 가능한 중첩 서브쿼리여야함
--- 가상 테이블 형식으로 사용
--- ORDER BY 절은 사용 불가능

--- 파생테이블, TOP을 이용하여 페이징 처리도 가능
    SELECT TOP(갯수)
     FROM ( SELECT TOP(갯수) 
                 FROM ( SELECT TOP(페이지번호 * 갯수)
                             FROM 테이블
                          ORDER BY 순서 DESC
                         )
                  ORDER BY 순서 ASC
               )
      ORDER BY 순서 DESC

--CTE
--- WITH 테이블별칭 (컬럼) 
    AS (파생테이블)
    SELECT *****

--- 파생테이블 + 뷰 장점  (즉, 재사용이 가능)
--- CTE끼리도 참조하여 중첩으로 사용 가능 
--- 파생테이블 처럼 페이징처리가 가능함!
     (결과 쿼리가 깔끔해짐)

--- 재귀처리 가능 ****** 중요! (좀 더 공부가 필요)
---- 재귀처리를 통해 반복하게 됨(루프동작활용)
ex.
WITH 숫자반복 AS
(
  SELECT 1 AS NUM
  UNION ALL
  SELECT NUM + 1
   FROM 숫자반복
   WHERE NUM < 100
)

-- APPLY
--- 기능
---- 파생테이블 + 상관 서브쿼리의 조합
---- 테이블 값 함수 호출
---- 전처리할 때 쓰임!!!

--- 동작 
---- 왼쪽에 지정된 테이블을 기준으로 테이블 표현식 반복호출

--- 종류
---- CROSS APPLY (INNER JOIN)
---- OUTER APPLY (LEFT JOIN)

--- 사용 (활용)
ex . SELECT year1, year2
      FROM 테이블
      CROSS APPLY ( VALUES (YEAR('20210302') ) AS 테이블별칭(year1)
      CROSS APPLY ( VALUES (테이블별칭.year1 + 1) ) AS 테이블별칭2(year2)
      WHERE year2 >= 2021
      (조건 값에 가공된 값을 서브쿼리처리없이 바로 쓸 수 있다)
      (해당 예시는 VALUES를 써서 가상의 행을 만든것이다
       서브쿼리도 똑같이 가능)   
  
ex .  SELECT
       FROM 테이블
     OUTER APLLY 사용자정의함수(테이블.컬럼)

- 순위 함수
-- 구조
--- 순위 함수() OVER(PARTITION BY , ORDER BY)
     (PARTITION BY를 통해 각 파트마다 순위를 매길 수 있음)

-- 종류
--- ROW_NUMBER() > 행번호 출력

--- RANK() > 행 순위, 비연속순위 (ex. 1,2,2,4)

--- DENSE_RANK()  > 행 순위, 연속순위 (ex. 1,2,2,3)

--- NTILE(타일 수)
---- 그룹 순번
---- 타일(그룹, 버킷) 별 순번 달기  (ex. 팀원 배정)
---- 타일별 행수 = 전체행수 / 타일 수 (ex. 행 9 / 타일 4)
      (남은 행은 타일 순으로 1개씩 배정)

--- OFFSET FETCH 구문 (페이징처리에 좋음)
---- SQL SERVER 20212부터 가능

---- 문법 
----- ORDER BY 절에 사용 가능
----- OFFSET (스킵할 행수) FETCH (검색할 행수)
 ex. ORDER BY ORDER_ID DESC
     OFFSET 20 ROWS FETCH NEXT 30 ROWS ONLY
    (정렬된 행들중 20개를 건너뛰고 30개를 보여줌)


4. 집계와 통계

- COUNT(*) vs COUNT(culumn) 
  (NULL 포함)   (NULL 미포함)
  (행이 존재하면) (해당 행의 culumn값이 존재하면)

- COUNT()는 INT형이다. INT형의 숫자한계를 넘어서면 오류발생
  그럴 땐 COUNT_BIG()을 써야함

- OVER()
-- 문법
--- OVER( <window partition> <window order> <window frame>

-- Window
--- 행들의 그룹을 뜻함 (집계함수의 시작과 끝을 나타내는 범위)
     (즉, 집계함수 초기화의 기준을 지정해줌)
     ex. d값의 집계가 끝났으면 e값부터는 다시 0으로 돌아가서 계산

--- PARTITION BY를 통해 어느 한 컬럼을 기준으로
    window를 나누어 결과를 표현해줌 
    
-- Order
--- ORDER BY 를 통해 순서를 표현
--- Frame을 활용하여 결과값을 보여줌

-- Frame
--- 이동/누적 범위를 나타냄
     (RANGE / ROWS) 옵션이 존재
     (RANGE : 같은 값으로 그룹핑)
     (ROWS : 개별 행 별로)

--- ORDER BY를 통해 정렬된 데이터에서 (RANGE: 같은 값끼리 그룹지어 / ROWS: 개별행으로 ) 
     누적 집계하여 결과를 보여줌
      ex. 1997년도 기준으로 집계한 결과를 보여주고
          누적으로 1997~1998년도 기준으로 집계한 결과를 보여줌
          반복...
 
--- 사용법
    ( ROWS / RANGE ) BETWEEN 시작구문 AND 끝구문

---- 시작 구문 종류
----- UNBOUNDED PRECDING >> window의 첫행을 기준
----- 숫자 PRECEDING >> 현재행(CURRENT ROW)를 기준으로 앞의 숫자 행만큼을 기준
----- CURRENT ROW >> 현재 집계중인 행

---- 끝 구문 종류
----- UNBOUNDED FOLLOWING >> window의 끝행을 기준
----- 숫자 FOLLOWING >> 현재행(CURRENT ROW)를 기준으로 뒤의 숫자 행만큼을 기준
----- CURRENT ROW >> 현재 집계중인 행

--- 데이터 정합성 문제
---- ROWS로 FRAME을 짤때 OVER()의 ORDER BY값이 유일한 값이 아닌 경우 (ex. 년도)
      순서 정렬이 불가능하여 누적 집계할 때 데이터 정합성 문제가 생김
      (조건을 하나 더 추가하거나 해야함)

- 분석함수
-- OVER() 사용 가능 (window를 나눌 수 있음) 
-- 분류
--- 위치함수
---- LAG(컬럼, offset숫자, 디폴트 숫자) >> 현재행에서 offset숫자 만큼 이전 행 값 (값이 NULL이면 디폴트숫자값)
---- LEAD(컬럼, offset숫자, 디폴트 숫자) >> 현재행에서 offset숫자 만큼 다음 행 값 (값이 NULL이면 디폴트숫자값)
---- FIRST_VALUE(컬럼) >> window Frame의 첫번째 행 값 (UNBOUNDED PRECDING 유사)
---- LAST_VALUE(컬럼) >> window Frame의 마지막 행 값 (UNBOUNDED FOLLOWING 유사)

--- 분포함수
---- PERCENT_RANK >> 순위에 대한 백분율 (내 밑에 몇명이 있는가)
      (RANK - 1) / (ROWS - 1)
---- CUME_DIST >> 누적분포 누적순위에 대한 백분율 (밑에서 부터 내 위치는 어디인가)
      (COUNT(*) <= VALUE ) / (ROWS)
---- PERCENTILE_CONT >> 구간의 중앙값
---- PERCENTILE_DISC >> 구간의 중앙값( 짝수개의 경우 소수점이 발생하기에 반올림한 값)

- PIVOT 연산자
-- 행을 열로 전환할 떄 사용
   (전통적으론 CASE(GROUP BY)로 구현)
-- 정적인 PIVOT만 가능함 (동적으로는 불가능한 제한사항이 존재함)

-- 동적인 PIVOT은 전통적인 방법이 필요

ex.
SELECT [1993], [1994], [1995]
  FROM
    ( SELECT year
       FROM 테이블
    )
 PIVOT
 (
    COUNT(year)    >> 집계값
    FOR year IN ([1993], [1994], [1995])

또는 (열을 행으로 변환)

 UNPIVOT
 (
    값에 대한 컬럼이름지정    >> 집계값
    FOR 열에대한 컬럼이름지정 IN ([1993], [1994], [1995])

- 소계와 총계
-- GROUPING SETS
--- GROUP BY 결과에 대한 추가 집계 기능

--- ROLLUP, CUBE로 단방향, 양방향으로 간단히 표현할 수 있지만
    원하는 소계만 커스텀으로 만들고 싶다면
    GROUPING SETS을 사용하면 됨

--- 사용법
---- 긴버전(단방향)
 GROUP BY GROUPING SETS
 (
   (컬림1, 컬럼2), >> 두 값에 대한 소계
    (컬럼1), >> 한 값에 대한 소계
    (), >> 전체 소계
  )
---- 축약버전 (단방향)
GROUP BY ROLLUP
 (
   (컬림1, 컬럼2)
  )

---- 긴버전(양방향)
 GROUP BY GROUPING SETS
 (
   (컬림1, 컬럼2), >> 두 값에 대한 소계
    (컬럼1), >> 한 값에 대한 소계
    (컬럼2), >> 한 값에 대한 소계
    (), >> 전체 소계
  )
---- 축약버전 (양방향)
GROUP BY CUBE
 (
   (컬림1, 컬럼2)
  )


-- GROUPING(컬럼)
--- 결과 행이 집계 데이터면 1, 아니면 0을 표시
--- ORDER BY로 정렬할 때 많이 쓰임

-- GROUPING_ID(컬럼,컬럼...)
--- 결과 행이 집계 데이터가 아니면 0, 집계 데이터면
     그 안에서 그룹집계에 대해 2진수로 반환 (1,2,3..)
--- ORDER BY로 정렬할 때 많이 쓰임
