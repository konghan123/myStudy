1. 익명클래스
정의
> 일시적으로 한번만 사용되고 버려지는 객체
> 클래스를 생성하지 않고 일회성으로 재정의하여 사용

주의사항
> 일회성으로 쓰는 타깃의 클래스의 메서드만 사용 가능
   (해당 익명 클래스에 따로 선언한 메서드는 사용할 수 없다)
   (타깃 객체로 만들어지는데 타깃객체는 따로 선언한 메서드의 정보가
    없기 때문)

2. 람다
정의
> 익명클래스를 사용하다보면 코드가 길어지고 지저분해짐
    그것을 간단하게 해주는 것이 람다식이다.

주의사항
> 함수형 인터페이스인 경우만 사용 가능
    (인터페이스에 메서드가 하나만 있는 경우)
    (함수만을 쓰기 위한 인터페이스 @FunctionalInterface라는 어노테이션으로 인터페이스를 구분함)

> 외부 지역변수에서 effectively final 값만 사용할 수 있다.
   (선언 후 변경되지 않은 지역 변수)
   (인스턴스 변수(클래스 필드변수), 클래스 변수 (static 클래스변수) 는 상관없이 사용가능)

> 람다식에서 사용된 외부 지역 변수는 복사본이며
   람다식 안에서는 final변수로 다뤄짐( 값 변경 불가)
   (지역 변수는 stack에서 저장되게 때문에 값을 바로 참조할 수가 없다)
   (람다식이 컴파일단에서 static메서드 형태로 변경되기 때문)

> 인스턴스 벼수, 클래스 변수는 사용하고 변경 가능한 이유는
    인스턴스 변수, 클래스 변수를 저장하는 메모리 영역은 공통영역이며
    메모리에서 바로 회수되지 않으므로 참조가 가능해지며
    복사 과정이 불필요하다 단, 멀티쓰레드 환경에서는 동기화가 반드시 필요함


> 할당

>>변수할당
ex.
interface Sum { int add(int x. int y)}

Sum lambda = (x,y) -> x + y;
lambda.add(1,2);

>>매개변수할당
ex.
interface Sum { int add(int x. int y)}

int n = result((x,y) -> x + y);

public int result(Sum lambda) {
    return lambda.add(1, 2)
}

>> 반환값 할당

interface Sum { int add(int x. int y)}

Sum lambda = makeSum()
int result = lambda.add(1,2)

public Sum makeSum() {
    return (x,y) -> x + y;
}

